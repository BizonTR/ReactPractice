{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BATUHAN\\\\Desktop\\\\react_practice\\\\src\\\\components\\\\employeeList\\\\EmployeeList.js\",\n  _s = $RefreshSig$();\n//rfc snippeti kullanılabilir.\nimport React, { useContext } from 'react';\nimport AppContext from '../../contexts/AppContext';\nimport Employee from '../employee/Employee';\nimport EmployeeAdd from '../employeeAdd/EmployeeAdd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EmployeeList() {\n  _s();\n  const {\n    employees,\n    setList,\n    setSelectedEmployee\n  } = useContext(AppContext);\n  const handleClearAll = () => (alert(\"ALERT\"), props.changedList([]));\n  const handleClearOne = id => {\n    props.changedList(props.employees.filter(emp => emp.id !== id));\n  };\n  //(App.js 25. satır ile ilişkili) => Burada da App.js'den gelen employees'i karşılamamız gerekir. bu sınıftaki fonksiyona parametre olarak \"props\" vererek bu sınıfa başka yerlerden gönderilen verileri \"props.\" şeklinde kullanabiliriz.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"EmployeeList \", props.employees.length, props.employees.map(emp => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Employee, {\n        employee: emp,\n        handleClearOne: handleClearOne,\n        setSelectedEmployee: props.setSelectedEmployee\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 44\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 39\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClearAll,\n      children: \"Clear All\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleClearOne(1),\n      children: \"ClearOne\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EmployeeAdd, {\n      employees: props.employees,\n      changedList: props.changedList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n_s(EmployeeList, \"jvGOz38QJA1Uh+yhAOj/IoZJylo=\");\n_c = EmployeeList;\nvar _c;\n$RefreshReg$(_c, \"EmployeeList\");","map":{"version":3,"names":["React","useContext","AppContext","Employee","EmployeeAdd","EmployeeList","employees","setList","setSelectedEmployee","handleClearAll","alert","props","changedList","handleClearOne","id","filter","emp","length","map"],"sources":["C:/Users/BATUHAN/Desktop/react_practice/src/components/employeeList/EmployeeList.js"],"sourcesContent":["//rfc snippeti kullanılabilir.\r\nimport React, { useContext } from 'react'\r\nimport AppContext from '../../contexts/AppContext'\r\nimport Employee from '../employee/Employee'\r\nimport EmployeeAdd from '../employeeAdd/EmployeeAdd'\r\n\r\nexport default function EmployeeList() {\r\n  const {employees, setList, setSelectedEmployee} = useContext(AppContext)\r\n\r\n  const handleClearAll = () => (\r\n    alert(\"ALERT\"),\r\n    props.changedList([])\r\n  )\r\n  const handleClearOne = (id) => {\r\n    props.changedList(props.employees.filter(emp => emp.id!==id))\r\n  }\r\n  //(App.js 25. satır ile ilişkili) => Burada da App.js'den gelen employees'i karşılamamız gerekir. bu sınıftaki fonksiyona parametre olarak \"props\" vererek bu sınıfa başka yerlerden gönderilen verileri \"props.\" şeklinde kullanabiliriz.\r\n  return (\r\n    <div>\r\n      EmployeeList {props.employees.length}\r\n      {\r\n        props.employees.map((emp) => (<div><Employee employee={emp} handleClearOne={handleClearOne} setSelectedEmployee={props.setSelectedEmployee}/></div>))\r\n      }\r\n      <button onClick={handleClearAll}>Clear All</button>\r\n      <button onClick={() => handleClearOne(1)}>ClearOne</button>\r\n      <EmployeeAdd employees = {props.employees} changedList = {props.changedList}/>\r\n    </div>\r\n  )\r\n}"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAOC,UAAU,MAAM,2BAA2B;AAClD,OAAOC,QAAQ,MAAM,sBAAsB;AAC3C,OAAOC,WAAW,MAAM,4BAA4B;AAAA;AAEpD,eAAe,SAASC,YAAY,GAAG;EAAA;EACrC,MAAM;IAACC,SAAS;IAAEC,OAAO;IAAEC;EAAmB,CAAC,GAAGP,UAAU,CAACC,UAAU,CAAC;EAExE,MAAMO,cAAc,GAAG,OACrBC,KAAK,CAAC,OAAO,CAAC,EACdC,KAAK,CAACC,WAAW,CAAC,EAAE,CAAC,CACtB;EACD,MAAMC,cAAc,GAAIC,EAAE,IAAK;IAC7BH,KAAK,CAACC,WAAW,CAACD,KAAK,CAACL,SAAS,CAACS,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACF,EAAE,KAAGA,EAAE,CAAC,CAAC;EAC/D,CAAC;EACD;EACA,oBACE;IAAA,4BACgBH,KAAK,CAACL,SAAS,CAACW,MAAM,EAElCN,KAAK,CAACL,SAAS,CAACY,GAAG,CAAEF,GAAG,iBAAM;MAAA,uBAAK,QAAC,QAAQ;QAAC,QAAQ,EAAEA,GAAI;QAAC,cAAc,EAAEH,cAAe;QAAC,mBAAmB,EAAEF,KAAK,CAACH;MAAoB;QAAA;QAAA;QAAA;MAAA;IAAE;MAAA;MAAA;MAAA;IAAA,QAAO,CAAC,eAEvJ;MAAQ,OAAO,EAAEC,cAAe;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAmB,eACnD;MAAQ,OAAO,EAAE,MAAMI,cAAc,CAAC,CAAC,CAAE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAkB,eAC3D,QAAC,WAAW;MAAC,SAAS,EAAIF,KAAK,CAACL,SAAU;MAAC,WAAW,EAAIK,KAAK,CAACC;IAAY;MAAA;MAAA;MAAA;IAAA,QAAE;EAAA;IAAA;IAAA;IAAA;EAAA,QAC1E;AAEV;AAAC,GAtBuBP,YAAY;AAAA,KAAZA,YAAY;AAAA;AAAA"},"metadata":{},"sourceType":"module"}