{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsunspor\\\\Desktop\\\\ReactPractice\\\\src\\\\components\\\\employeeList\\\\EmployeeList.js\";\n//rfc snippeti kullanılabilir.\nimport React from 'react';\nimport Employee from '../employee/Employee';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EmployeeList(props) {\n  //(App.js 25. satır ile ilişkili) => Burada da App.js'den gelen employees'i karşılamamız gerekir. bu sınıftaki fonksiyona parametre olarak \"props\" vererek bu sınıfa başka yerlerden gönderilen verileri \"props.\" şeklinde kullanabiliriz.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"EmployeeList \", props.employees.lenght, /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"props.employees.map((emp) => (\", /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Employee, {\n          employee: emp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 42\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Button\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 70\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 37\n      }, this), \"))\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n}\n_c = EmployeeList;\nvar _c;\n$RefreshReg$(_c, \"EmployeeList\");","map":{"version":3,"names":["React","Employee","EmployeeList","props","employees","lenght","emp"],"sources":["C:/Users/Samsunspor/Desktop/ReactPractice/src/components/employeeList/EmployeeList.js"],"sourcesContent":["//rfc snippeti kullanılabilir.\r\nimport React from 'react'\r\nimport Employee from '../employee/Employee'\r\n\r\nexport default function EmployeeList(props) {\r\n  //(App.js 25. satır ile ilişkili) => Burada da App.js'den gelen employees'i karşılamamız gerekir. bu sınıftaki fonksiyona parametre olarak \"props\" vererek bu sınıfa başka yerlerden gönderilen verileri \"props.\" şeklinde kullanabiliriz.\r\n  return (\r\n    <div>\r\n      EmployeeList {props.employees.lenght}\r\n    {\r\n      <div>\r\n      props.employees.map((emp) => (<div><Employee employee={emp}  /><button>Button</button></div>))\r\n      </div>\r\n    }\r\n\r\n    </div>\r\n  )\r\n}"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,sBAAsB;AAAA;AAE3C,eAAe,SAASC,YAAY,CAACC,KAAK,EAAE;EAC1C;EACA,oBACE;IAAA,4BACgBA,KAAK,CAACC,SAAS,CAACC,MAAM,eAEpC;MAAA,0DAC8B;QAAA,wBAAK,QAAC,QAAQ;UAAC,QAAQ,EAAEC;QAAI;UAAA;UAAA;UAAA;QAAA,QAAI;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAuB;MAAA;QAAA;QAAA;QAAA;MAAA,QAAM;IAAA;MAAA;MAAA;MAAA;IAAA,QACtF;EAAA;IAAA;IAAA;IAAA;EAAA,QAGF;AAEV;AAAC,KAbuBJ,YAAY;AAAA;AAAA"},"metadata":{},"sourceType":"module"}